IMPORTANT QUESTION-

select replace ('Akanksha','k','') from dual;
- Aansha

select substr("Akanksha",1,4);
- Akan

select substr("Akanksha",-4);
- ksha

select instr("Akanksha",'a');  
-1

YOUTUBE QUESTION- 


1-

Functions Available: Aggregate - COUNT, SUM, MIN, MAX, AVG 
Offset - FIRST_VALUE, LAST_VALUE, LEAD, LAG 
Statistical - PERCENT_RANK, CUME_DIST, PERCENTILE_CONT, PERCENTILE_DIST 

WITH CTE AS
 ( 
SELECT Sales_Id , SUM(Line_Total) AS Total 
FROM Sales_Details 
GROUP BY Sales_Id
 ) 
SELECT * FROM CTE AS A INNER JOIN Sales_Details AS B ON A.Sales_Id = B.Sales_Id 

-------------------

SELECT Sales_Id , Sales_Date , Item , Price , Quantity , Line_Total , COUNT(Line_Total) OVER(PARTITION BY Sales_Id) AS Line_Count , SUM(Line_Total) OVER(PARTITION BY Sales_Id) AS Sales_Total , SUM(Line_Total) OVER(PARTITION BY Sales_Date) AS Daily_Total , SUM(Line_Total) OVER() AS Total
 FROM Sales_Details
 ORDER BY Sales_Total

-------------------------------------------------------------------------------------------------------------

2-
Aggregate - COUNT, SUM, MIN, MAX, AVG Ranking - ROW_NUMBER, RANK, DENSE_RANK, NTILE 
Offset - FIRST_VALUE, LAST_VALUE, LEAD, LAG 
Statistical - PERCENT_RANK, CUME_DIST, PERCENTILE_CONT, PERCENTILE_DIST 

ROW_NUMBER - unique incrementing integers 
RANK - same rank for same values
 DENSE_RANK - same rank for same values 
NTILE - assigns tile numbers based on number of tiles requested SQL: 

SELECT Sales_Id , Sales_Total ,
ROW_NUMBER() OVER(ORDER BY Sales_Total DESC) AS rownum , 
RANK() OVER(ORDER BY Sales_Total DESC) AS rnk , 
DENSE_RANK() OVER(ORDER BY Sales_Total DESC) AS dense ,
NTILE(3) OVER(ORDER BY Sales_Total DESC) AS ntle 
FROM dbo.Sales_2 

SELECT Sales_Id , NTILE(10) OVER(ORDER BY Sales_Total DESC) AS ntle 
FROM dbo.Sales_2

-------------------------------------------------------------------------------------------------------------


3-
SELECT Sales_Cust_Id , SUM(Sales_Total) AS Total
FROM dbo.Sales_2 
GROUP BY Sales_Cust_Id 
ORDER BY Total DESC 

SELECT Sales_Cust_Id , SUM(Sales_Total) AS Total , 
RANK() OVER(ORDER BY SUM(Sales_Total) DESC) AS rnk , 
DENSE_RANK() OVER(ORDER BY SUM(Sales_Total) DESC) AS dnse 
FROM dbo.Sales_2 
GROUP BY Sales_Cust_Id ORDER BY rnk
-------------------------------------------------------------------------------------------------------------


4- NONE
-------------------------------------------------------------------------------------------------------------

5-


Functions Available: Aggregate - COUNT, SUM, MIN, MAX, AVG Ranking - ROW_NUMBER, RANK, DENSE_RANK, NTILE Offset - FIRST_VALUE, LAST_VALUE, LEAD, LAG Statistical - PERCENT_RANK, CUME_DIST, PERCENTILE_CONT, PERCENTILE_DIST

 

SELECT Sales_Id , Sales_Date , Sales_Total , 
SUM(Sales_Total) OVER(ORDER BY Sales_Date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS [Running Total] 
FROM dbo.Sales_2
 WHERE Sales_Cust_Id = 3
 ORDER BY Sales_Date 

SELECT Sales_Id , Sales_Date , Sales_Total , 
SUM(Sales_Total) OVER(ORDER BY Sales_Date ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS [Running Total] 
FROM dbo.Sales_2 
WHERE Sales_Cust_Id = 3 
ORDER BY Sales_Date

 SELECT Sales_Id , Sales_Date , Sales_Total , 
SUM(Sales_Total) OVER(ORDER BY Sales_Date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS [Running Total] 
FROM dbo.Sales_2 
WHERE Sales_Cust_Id = 3 
ORDER BY Sales_Date 

SELECT Sales_Id , Sales_Date , 
Sales_Total , SUM(Sales_Total) OVER(ORDER BY Sales_Date ROWS UNBOUNDED PRECEDING) AS [Running Total]
 FROM dbo.Sales_2
 WHERE Sales_Cust_Id = 3
 ORDER BY Sales_Date 





SELECT Sales_Id , Sales_Date , Sales_Total , 
SUM(Sales_Total) OVER(ORDER BY Sales_Date ROWS UNBOUNDED PRECEDING) AS [Running Total] ,
 CAST(AVG(Sales_Total) OVER(ORDER BY Sales_Date ROWS UNBOUNDED PRECEDING) AS DECIMAL(8, 2)) AS [Running Average] 
FROM dbo.Sales_2 
WHERE Sales_Cust_Id = 3
 ORDER BY Sales_Date
-------------------------------------------------------------------------------------------------------------


6-

INSERT INTO dbo.Sales (Sales_Customer_Id, Sales_Date, Sales_Amount) VALUES (1, '20180102', 54.99) , (1, '20180103', 72.99) , (1, '20180104', 34.99) , (1, '20180115', 29.99) , (1, '20180121', 67.00)

SELECT Sales_Customer_Id , Sales_Date ,
 LAG(Sales_Amount, 2, 0) OVER(PARTITION BY Sales_Customer_Id ORDER BY Sales_Date) AS PrevValue , 
Sales_Amount , 
LEAD(Sales_Amount, 2, 0) OVER(PARTITION BY Sales_Customer_Id ORDER BY Sales_Date) AS NextValue 
FROM dbo.Sales 
-------------------------------------------------------------------------------------------------------------


7-

WITH Number AS
 ( 
SELECT CustomerId , 
NTILE(1000) OVER(ORDER BY CustomerId) AS N FROM dbo.Customers ) , 
TopCustomer AS ( SELECT MAX(CustomerId) AS CustId 
FROM Number 
GROUP BY N
 )

SELECT C2.* INTO dbo.CustomersSample
 FROM TopCustomer AS C1 
INNER JOIN dbo.Customers AS C2 
ON C1.CustId = C2.CustomerId 

-------------------------------------------------------------------------------------------------------------

8-

WITH CTE AS 
(
 SELECT Sales_Customer_Id , Sales_Date , Sales_Amount ,
 LAG(Sales_Amount) OVER(PARTITION BY Sales_Customer_Id ORDER BY Sales_Date) AS PrevValue , 
Sales_Amount - LAG(Sales_Amount) OVER(PARTITION BY Sales_Customer_Id ORDER BY Sales_Date) AS RunningDifference 
FROM dbo.Sales ) 

SELECT Sales_Customer_Id , AVG(RunningDifference) AS AverageDifference
 FROM CTE 
GROUP BY Sales_Customer_Id 
ORDER BY AverageDifference DESC;
-------------------------------------------------------------------------------------------------------------



9-

SELECT Sales_Customer_Id , 
SUM(Sales_Amount) AS Cust_Total , 
SUM(SUM(Sales_Amount)) OVER(ORDER BY (SELECT NULL)) AS Grand_Total , 
AVG(SUM(Sales_Amount)) OVER(ORDER BY (SELECT NULL)) AS Average_Cust_Total , 
CAST((SUM(Sales_Amount) / SUM(SUM(Sales_Amount)) OVER(ORDER BY (SELECT NULL))) * 100 AS DECIMAL(6,2)) AS Pct 
FROM dbo.Sales 
GROUP BY Sales_Customer_Id

-------------------------------------------------------------------------------------------------------------

10-

SELECT * , 
SUM(SalesAmount) OVER(ORDER BY [Date] ROWS BETWEEN 9 PRECEDING AND CURRENT ROW) AS Total ,
 SUM(SalesAmount) OVER(ORDER BY [Date] ROWS BETWEEN CURRENT ROW AND 9 FOLLOWING) AS Forward 
FROM #TempSales
ORDER BY [Date] 

-------------------------------------------------------------------------------------------------------------

11

12-


WITH CTE AS 
( 
SELECT SalesId, SUM(LineTotal) AS SalesTotal FROM dbo.SalesDetails GROUP BY SalesId
 )
 SELECT SalesDetailsId, A.SalesId, SalesDate, ProductId, Price, Quantity, LineTotal, SalesTotal
 FROM dbo.SalesDetails AS A
 INNER JOIN CTE AS B 
ON A.SalesId = B.SalesId; 

SELECT SalesDetailsId, SalesId, SalesDate, ProductId, Price, Quantity, LineTotal, 
SUM(LineTotal) OVER(PARTITION BY SalesId) AS SalesTotal, 
COUNT(SalesDetailsId) OVER(PARTITION BY SalesId) AS SalesCount, 
SUM(LineTotal) OVER(PARTITION BY SalesDate) AS DailyTotal, 
SUM(LineTotal) OVER(PARTITION BY SalesDate, ProductId) AS DailyProductSales,
SUM(LineTotal) OVER() AS SalesGrandTotal, 100 * SUM(LineTotal) OVER(PARTITION BY SalesId) / SUM(LineTotal) OVER() AS pcttotal
 FROM dbo.SalesDetails 
ORDER BY SalesId

-------------------------------------------------------------------------------------------------------------

